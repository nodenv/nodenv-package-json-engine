#!/usr/bin/env bash
#
# If a custom Node version is not already defined, we look
# for a Node version semver expressing in the current tree's package.json.
# If we find a fixed version, we print it out. If we find a range we
# test the installed versions against that range and print the
# greatest matching version.

# Vendored scripts:
JSON_SH="$(plugin_root)/node_modules/JSON.sh/JSON.sh"
SEMVER="$(plugin_root)/node_modules/sh-semver/semver.sh"

# Exits non-zero if this plugin should yield precedence
# Gives precedence to local and shell versions.
# Takes precedence over global version.
package_json_has_precedence() {
  [ -z "$(nodenv local 2>/dev/null)" ] &&
    [ -z "$(nodenv sh-shell 2>/dev/null)" ]
}

find_package_json_path() {
  local package_json root="${1-}"
  while [ -n "$root" ]; do
    package_json="$root/package.json"

    if [ -r "$package_json" ] && [ -f "$package_json" ]; then
      echo "$package_json"
      return
    fi
    root="${root%/*}"
  done
}

extract_version_from_package_json() {
  package_json_path="${1-}"
  version_regex='\["engines","node"\][[:space:]]*"([^"]*)"'
  # -b -n gives minimal output - see https://github.com/dominictarr/JSON.sh#options
  [[ $("$JSON_SH" -b -n <"$package_json_path" 2>/dev/null) =~ $version_regex ]]
  echo "${BASH_REMATCH[1]-}"
}

find_installed_version_matching_expression() {
  version_expression="${1-}"
  local -a installed_versions
  while IFS= read -r v; do
    installed_versions+=("$v")
  done < <(nodenv versions --bare --skip-aliases | grep -e '^[[:digit:]]')

  local fast_guess
  fast_guess=$("$SEMVER" -r "$version_expression" "${installed_versions[@]:${#installed_versions[@]}-1}" | tail -n 1)

  # Most #engine version specs just specify a baseline version,
  # which means most likely, the highest installed version will satisfy
  # This does a first pass with just that single version in hopes it satisfies.
  # If so, we can avoid the cost of sh-semver sorting and validating across
  # all the installed versions.
  if [ -n "$fast_guess" ]; then
    echo "$fast_guess"
    return
  fi

  "$SEMVER" -r "$version_expression" "${installed_versions[@]}" | tail -n 1
}

package_json_path() {
  path=$(find_package_json_path "${PWD-}")
  [ -r "$path" ] && [ -f "$path" ] && echo "$path"
}

get_version_respecting_precedence() {
  if ! package_json_has_precedence; then return; fi

  package_json_path=$(package_json_path) || return 0

  version_expression=$(
    extract_version_from_package_json "$package_json_path"
  )
  if [ -z "$version_expression" ]; then return; fi

  version=$(
    find_installed_version_matching_expression "$version_expression"
  )
  if [ -z "$version" ]; then return 1; fi
  echo "$version"
}

get_expression_respecting_precedence() {
  if ! package_json_has_precedence; then return; fi

  package_json_path=$(package_json_path) || return 0

  version_expression=$(
    extract_version_from_package_json "$package_json_path"
  )
  echo "$version_expression"
}
